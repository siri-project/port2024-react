//// mixin
// breakpoint
// @include breakpoint(maxMobile){ ... }
@mixin breakpoint($point) {
	@if $point == desktop {
		@media screen and (min-width: 1200px) { @content ; }
	}
	@if $point == minDesktop {
		@media screen and (min-width: 768px) { @content ; }
	}
	@if $point == maxMobile {
		@media screen and (min-width: 720px) { @content ; }
	}
	@else if $point == minMobile {
		@media screen and (max-width: 320px) { @content ; }
	}
}

// Custom devices
// @include rwdWidth(1400px) { ... }
@mixin rwdWidth($width) {
	@media (min-width: $width) {
		@content;
	}
}

// @include rwdHeight(480px) { ... }
@mixin rwdHeight($height) {
	@media (max-height: $height) {
		@content;
	}
}

// box-sizing
// @include boxSizing(border-box);
@mixin boxSizing($box) {
	@each $prefix in -webkit-, '' {
		#{$prefix}box-sizing: $box;
	}
}

// box-shadow
// @include boxShadow(0 10px 5px 0 rgba(0, 0, 0, .5));
// @include boxShadow(5px 5px 5px 0 rgba(255, 255, 255, .3) inset, -5px -5px 5px 0 rgba(0, 0, 0, .25) inset);
@mixin boxShadow($value...){
	@each $prefix in -webkit-, '' {
		#{$prefix}box-shadow: $value;
	}
}

// transition
// @include transition(all, .3s, ease-out);
@mixin transition($what, $time, $how: null) {
	@each $prefix in -webkit-, -o-, '' {
		// #{$prefix}transition: $what $time $how;
		#{$prefix}transition-property: $what;
		#{$prefix}transition-duration: $time;

		@if $how {
			#{$prefix}transition-timing-function: $how;
		} @else {
			#{$prefix}transition-timing-function: ease-out;
		}
	}
}

// transition delay
// @include transitionDelay(.1s);
@mixin transitionDelay($delay) {
	@each $prefix in -webkit-, -o-, '' {
		#{$prefix}transition-delay: $delay;
	}
}

// transform 다중
// @include transform(translate(-75%, -50%) rotate(45deg));
@mixin transform($transforms) {
	@each $prefix in -webkit-, -ms-, '' {
		#{$prefix}transform: $transforms;
	}
}

// transform : rotate
// @include rotate(45deg);
@mixin rotate($deg) {
	@include transform(rotate($deg));
}

// @include rotateX(45deg);
@mixin rotateX($deg) {
	@include transform(rotateX($deg));
}

// @include rotateY(45deg);
@mixin rotateY($deg) {
	@include transform(rotateY($deg));
}

// transform : scale XY
// @include scaleXY(1.2, 1.2);
@mixin scaleXY($x, $y) {
	@include transform(scale($x, $y));
}

// transform : scale X
// @include scaleX(1.2);
@mixin scaleX($x) {
	@include transform(scaleX($x));
}

// transform : scale Y
// @include scaleY(1.2);
@mixin scaleY($y) {
	@include transform(scaleY($y));
}

// transform : translate XY
// @include translateXY(100px, 100px);
@mixin translateXY($x, $y) {
	@include transform(translate($x, $y));
}

// transform : translate X
// @include translateX(100px);
@mixin translateX($x) {
	@include transform(translateX($x));
}

// transform : translate Y
// @include translateY(100px);
@mixin translateY($y) {
	@include transform(translateY($y));
}

// transform : skew XY
// @include skewXY(10px, 10px);
@mixin skewXY($x, $y) {
	@include transform(skew($x, $y));
}

// transform : skew X
// @include skewX(10px);
@mixin skewX($x) {
	@include transform(skewX($x));
}

// transform : skew Y
// @include skewY(10px);
@mixin skewY($y) {
	@include transform(skewY($y));
}

// transform : transform-origin
// @include transformOrigin(center bottom);
@mixin transformOrigin($origin) {
	@each $prefix in -webkit-, -ms-, '' {
		#{$prefix}transform-origin: $origin;
	}
}

// rem
// @include rem(margin, 25px 20px 0);
// https://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
@mixin rem($property, $values) {
	$px: (); // We define a list of values for both units
	$rem: (); // We define a list of values for both units

	@each $value in $values {
	// We iterate through each value in the given parameter $values

		@if $value == 0 or $value == auto {
			// If the value is either auto or 0, we append it to the list as-is
			$px: append($px, $value);
			$rem: append($rem, $value);
		} @else {
			$unit: unit($value); // If the value has a unit, we split it to get both the unit and the raw value
			$val: parseInt($value); // If the value has a unit, we split it to get both the unit and the raw value

			@if $unit == 'px' {
				// We append according values to the lists depending on the unit of the given value
				$px: append($px, $value);
				$rem: append($rem, ($val / 16 / 2+ rem));
			}

			@if $unit == 'rem' {
				// We append according values to the lists depending on the unit of the given value
				$px: append($px, ($val * 16 + px));
				$rem: append($rem, $value);
			}
		}
	}

	@if $px == $rem {
		// If the two lists are the same, we ouput only one (like margin-top: 0)
		#{$property}: $px; // output the result
	} @else {
		#{$property}: $rem;  // output the result
		@include breakpoint(maxMobile){
			#{$property}: $px; // output the result
		}
	}
}

// vw
// @include vw(font-size, 50px);
@mixin vw($property, $values) {
	$px: ();
	$vw: ();

	@each $value in $values {
		@if $value == 0 or $value == auto {
			$px: append($px, $value);
			$vw: append($vw, $value);
		} @else {
			$unit: unit($value);
			$val: parseInt($value);

			@if $unit == 'px' {
				$px: append($px, $value);
				$max-mobile: 720;
				$vw-context: ($max-mobile * .01) * 1;
				$vw: append($vw, (($val/$vw-context) * 1 + vw));
			}

			@if $unit == 'vw' {
				$px: append($px, ($val * 16 + px));
				$vw: append($vw, $value);
			}
		}
	}

	@if $px == $vw {
		#{$property}: $px;
	} @else {
		#{$property}: $vw;
		@include breakpoint(maxMobile){
			#{$property}: $px;
		}
	}
}

// animation
// @include animation(shadow, 2s) {
// 	0% { @include boxShadow(0, 0, 16px, 2px, rgba(251, 104, 90, .3)); }
// 	50% { @include boxShadow(0, 0, 5px, 2px, rgba(251, 104, 90, .3)); }
// 	100% { @include boxShadow(0, 0, 16px, 2px, rgba(251, 104, 90, .3)); }
// }

// @include animation(rotation, 16s, $iteration: infinite, $timing: linear ,$reverse: reverse) {
// 	100% { @include rotate(360deg); }
// }
@mixin animation($name, $duration, $iteration: null, $timing: null, $reverse: null) {
	//$name: inline-$name;

	@-webkit-keyframes #{$name} {
		@content;
	}

	@keyframes #{$name} {
		@content;
	}

	animation-name: $name;
	animation-duration: $duration;

	@if $iteration {
		animation-iteration-count: $iteration;
	} @else {
		animation-iteration-count: 1;
	}

	@if $timing {
		animation-timing-function: $timing;
	} @else {
		animation-timing-function: ease;
	}

	@if $reverse {
		animation-direction: $reverse;
	} @else {
		animation-direction: normal;
	}
}

// animation delay
// @include animationDelay(.1s);
@mixin animationDelay($delay) {
	@each $prefix in -webkit-, '' {
		#{$prefix}animation-delay: $delay;
	}
}

/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient

// @include linear-gradient(#31B7D7, #EDAC7D);
// @include linear-gradient(to right, #fa6568 0%, #ff9048 100%);
// @include linear-gradient(190deg, #f2f3f7 0%, #f2f3f7 50%, #e1ebf5 50%, #e1ebf5 90%, #f2f3f7 90%, #f2f3f7 100%);
@mixin linear-gradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
		$color-stops: ($direction, $color-stops);
		$direction: 180deg;
	}

	background: nth(nth($color-stops, 1), 1);
	background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
	background: linear-gradient($direction, $color-stops);
}

// @include radial-gradient(#31B7D7, #EDAC7D);
// @include radial-gradient(closest-side, #3f87a6, #ebf8e1, #f69d3c);
// @include radial-gradient(circle at 100%, #333, #333 50%, #eee 75%, #333 75%);
// @include radial-gradient(ellipse at top, #31B7D7, #EDAC7D);
// @include radial-gradient(ellipse at bottom, #31B7D7, #EDAC7D);
@mixin radial-gradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
		$color-stops: ($direction, $color-stops);
		$direction: 180deg;
	}

	background: nth(nth($color-stops, 1), 1);
	background: -webkit-radial-gradient(legacy-direction($direction), $color-stops);
	background: radial-gradient($direction, $color-stops);
}

// multiple text ellipsis
// @include multipleEllipsis(3);
@mixin multipleEllipsis($line){
	display: -webkit-box;
	overflow: hidden;
	word-wrap: break-word;
	@each $prefix in -o-, '' {
		#{$prefix}text-overflow: ellipsis;
	}
	@each $prefix in -webkit-, '' {
		#{$prefix}line-clamp: $line;
		#{$prefix}box-orient: vertical;
	}
}
