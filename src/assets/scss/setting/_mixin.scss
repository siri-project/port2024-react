//// mixin
// breakpoint
// @include breakpoint(maxMobile){ ... }
@mixin breakpoint($point) {
	@if $point == desktop {
		@media screen and (min-width: 1100px) { @content ; }
	}
	@if $point == minDesktop {
		@media screen and (min-width: 1024px) { @content ; }
	}
	@if $point == maxMobile {
		@media screen and (min-width: 720px) { @content ; }
	}
	@else if $point == minMobile {
		@media screen and (max-width: 320px) { @content ; }
	}
	@else if $point == galaxyfold { // for galaxyfold
		@media screen and (min-width: 590px) and (min-height: 603px) { @content ; }
	}
}

// Custom devices
// @include rwdWidth(1400px) { ... }
@mixin rwdWidth($width) {
	@media (min-width: $width) {
		@content;
	}
}

// @include rwdHeight(480px) { ... }
@mixin rwdHeight($height) {
	@media (max-height: $height) {
		@content;
	}
}

// box-sizing
// @include boxSizing(border-box);
@mixin boxSizing($box) {
	@each $prefix in -webkit-, '' {
		#{$prefix}box-sizing: $box;
	}
}

// box-shadow
// @include boxShadow(0 10px 5px 0 rgba(0, 0, 0, .5));
// @include boxShadow(5px 5px 5px 0 rgba(255, 255, 255, .3) inset, -5px -5px 5px 0 rgba(0, 0, 0, .25) inset);
@mixin boxShadow($value...){
	@each $prefix in -webkit-, '' {
		#{$prefix}box-shadow: $value;
	}
}

// transition
// @include transition(all, .3s, ease-out);
@mixin transition($what, $time, $how: null) {
	@each $prefix in -webkit-, -o-, '' {
		// #{$prefix}transition: $what $time $how;
		#{$prefix}transition-property: $what;
		#{$prefix}transition-duration: $time;

		@if $how {
			#{$prefix}transition-timing-function: $how;
		} @else {
			#{$prefix}transition-timing-function: ease-out;
		}
	}
}

// transition delay
// @include transitionDelay(.1s);
@mixin transitionDelay($delay) {
	@each $prefix in -webkit-, -o-, '' {
		#{$prefix}transition-delay: $delay;
	}
}

// transform 다중
// @include transform(translate(-75%, -50%) rotate(45deg));
@mixin transform($transforms) {
	@each $prefix in -webkit-, -ms-, '' {
		#{$prefix}transform: $transforms;
	}
}

// transform : rotate
// @include rotate(45deg);
@mixin rotate($deg) {
	@include transform(rotate($deg));
}

// @include rotateX(45deg);
@mixin rotateX($deg) {
	@include transform(rotateX($deg));
}

// @include rotateY(45deg);
@mixin rotateY($deg) {
	@include transform(rotateY($deg));
}

// transform : scale XY
// @include scaleXY(1.2, 1.2);
@mixin scaleXY($x, $y) {
	@include transform(scale($x, $y));
}

// transform : scale X
// @include scaleX(1.2);
@mixin scaleX($x) {
	@include transform(scaleX($x));
}

// transform : scale Y
// @include scaleY(1.2);
@mixin scaleY($y) {
	@include transform(scaleY($y));
}

// transform : translate XY
// @include translateXY(100px, 100px);
@mixin translateXY($x, $y) {
	@include transform(translate($x, $y));
}

// transform : translate X
// @include translateX(100px);
@mixin translateX($x) {
	@include transform(translateX($x));
}

// transform : translate Y
// @include translateY(100px);
@mixin translateY($y) {
	@include transform(translateY($y));
}

// transform : skew XY
// @include skewXY(10px, 10px);
@mixin skewXY($x, $y) {
	@include transform(skew($x, $y));
}

// transform : skew X
// @include skewX(10px);
@mixin skewX($x) {
	@include transform(skewX($x));
}

// transform : skew Y
// @include skewY(10px);
@mixin skewY($y) {
	@include transform(skewY($y));
}

// transform : transform-origin
// @include transformOrigin(center bottom);
@mixin transformOrigin($origin) {
	@each $prefix in -webkit-, -ms-, '' {
		#{$prefix}transform-origin: $origin;
	}
}

// close
// @include close(30px, 30px, 1px, #000);
@mixin close($width, $height, $thickness, $color) {
	position: absolute;
	top: 0;
	right: 0;
	display: block;
	@include vw(width, $width);
	@include vw(height, $height);
	&::before,
	&::after {
		content: '';
		position: absolute;
		top: 50%;
		left: 50%;
		display: block;
		width: $width / 2;
		height: $thickness;
		margin-left: -($width / 2) / 2;
		background-color: $color;
	}
	&::before { @include rotate(45deg); }
	&::after { @include rotate(315deg); }
	span {
		position: absolute;
		display: inline-block;
		overflow: hidden;
		clip: rect(0 0 0 0);
		width: 0px;
		height: 0px;
		margin: -1px;
		padding: 0;
		word-break: keep-all;
		white-space: nowrap;
		color: transparent;
		border: 0;
		text-indent: -9999px;
	}
}

// closeButton
// @include closeButton(#355ef0, 40px, 2px, #fff);
@mixin closeButton($bgColor, $size, $thickness, $lineColor) {
	& {
		display: inline-block;
		width: $size;
		height: $size;
		padding: $size/2;
		cursor: pointer;
	}

	@if $bgColor {
		background-color: $bgColor;
	} @else {
		background-color: transparent;
	}

	&::before,
	&::after {
		content: '';
		display: block;
		width: 140%;
		height: $thickness;
		background: $lineColor;
	}

	&::before {
		margin-top: -$thickness/4;
		margin-left: $thickness/2;
		@include rotate(45deg);
		@include transformOrigin(0 0);
	}

	&::after {
		margin-left: -41%;
		margin-top: -$thickness;
		@include rotate(-45deg);
		@include transformOrigin(100% 0);
	}
}

// arrow
// @include arrow(left, 8px, 8px, 2px, $color-base-dark);
@mixin arrow($direction, $width, $height, $borderWidth, $color) {
	& {
		position: relative;
		display: inline-block;
	}

	&::before {
		content: '';
		position: absolute;
		top: 50%;
		display: block;
		@include vw(width, $width);
		@include vw(height, $height);
		@include vw(margin-top, -($width/2));
		border-width: 0;
		border-style: solid;
		border-color: $color;
		@include rotate(45deg);

		@if $direction == 'right' {
			@include vw(right, $width*2);
			border-top-width: $borderWidth;
			border-right-width: $borderWidth;
		} @else if $direction == 'left' {
			@include vw(left, $width*2);
			border-bottom-width: $borderWidth;
			border-left-width: $borderWidth;
		} @else if $direction == 'bottom' {
			border-bottom-width: $borderWidth;
			border-right-width: $borderWidth;
		} @else if $direction == 'top' {
			border-top-width: $borderWidth;
			border-left-width: $borderWidth;
		}
	}
}

// arrow for slide
// @include slideArrow(left, 60px, 60px, 2px, #000);
// @include slideArrow(right, 60px, 60px, 2px, #000);
// @include slideArrow(left, 60px, 60px, 2px, #fff, rgba(0,0,0,.5));
// @include slideArrow(right, 60px, 60px, 2px, #fff, rgba(0,0,0,.5));
// @include slideArrow(left, 60px, 60px, 2px, #fff, rgba(0,0,0,.5), $margin: 620px);
// @include slideArrow(right, 60px, 60px, 2px, #fff, rgba(0,0,0,.5), $margin: 620px);
@mixin slideArrow($direction, $width, $height, $borderWidth, $borderColor, $bgColor: null, $margin: null) {
	position: absolute;
	top: 50%;
	z-index: 10;
	display: block;
	@include vw(width, $width);
	@include vw(height, $height);
	margin: 0;
	padding: 0;
	font-size: 0;
	color: transparent;
	text-indent: -9999px;
	border: none;
	outline: none;
	cursor: pointer;
	@include translateY(-50%);

	@if $direction == 'right' {
		right: 50%;
		@if $margin {
			@include vw(margin-right, -$margin);
		}
	} @else if $direction == 'left' {
		left: 50%;
		@if $margin {
			@include vw(margin-left, -$margin);
		}
	}

	@if $bgColor {
		background: $bgColor;
	} @else {
		background: none;
	}

	&::before {
		content: '';
		position: absolute;
		top: 50%;
		left: 50%;
		display: block;
		@include vw(width, ($width/4));
		@include vw(height, ($height/4));
		border-width: 0;
		border-style: solid;
		border-color: $borderColor;

		@if $direction == 'right' {
			border-top-width: $borderWidth;
			border-right-width: $borderWidth;
			@include transform(translate(-75%, -50%) rotate(45deg));
		} @else if $direction == 'left' {
			border-bottom-width: $borderWidth;
			border-left-width: $borderWidth;
			@include transform(translate(-25%, -50%) rotate(45deg));
		} @else if $direction == 'bottom' {
			border-bottom-width: $borderWidth;
			border-right-width: $borderWidth;
			@include transform(translate(-50%, -75%) rotate(45deg));
		} @else if $direction == 'top' {
			border-top-width: $borderWidth;
			border-left-width: $borderWidth;
			@include transform(translate(-50%, -25%) rotate(45deg));
		}
	}
}


// rem
// @include rem(margin, 25px 20px 0);
// https://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
@mixin rem($property, $values) {
	$px: (); // We define a list of values for both units
	$rem: (); // We define a list of values for both units

	@each $value in $values {
	// We iterate through each value in the given parameter $values

		@if $value == 0 or $value == auto {
			// If the value is either auto or 0, we append it to the list as-is
			$px: append($px, $value);
			$rem: append($rem, $value);
		} @else {
			$unit: unit($value); // If the value has a unit, we split it to get both the unit and the raw value
			$val: parseInt($value); // If the value has a unit, we split it to get both the unit and the raw value

			@if $unit == 'px' {
				// We append according values to the lists depending on the unit of the given value
				$px: append($px, $value);
				$rem: append($rem, ($val / 16 / 2+ rem));
			}

			@if $unit == 'rem' {
				// We append according values to the lists depending on the unit of the given value
				$px: append($px, ($val * 16 + px));
				$rem: append($rem, $value);
			}
		}
	}

	@if $px == $rem {
		// If the two lists are the same, we ouput only one (like margin-top: 0)
		#{$property}: $px; // output the result
	} @else {
		#{$property}: $rem;  // output the result
		@include breakpoint(maxMobile){
			#{$property}: $px; // output the result
		}
	}
}

// vw
// @include vw(font-size, 50px);
@mixin vw($property, $values) {
	$px: ();
	$vw: ();

	@each $value in $values {
		@if $value == 0 or $value == auto {
			$px: append($px, $value);
			$vw: append($vw, $value);
		} @else {
			$unit: unit($value);
			$val: parseInt($value);

			@if $unit == 'px' {
				$px: append($px, $value);
				$max-mobile: 720;
				$vw-context: ($max-mobile * .01) * 1;
				$vw: append($vw, (($val/$vw-context) * 1 + vw));
			}

			@if $unit == 'vw' {
				$px: append($px, ($val * 16 + px));
				$vw: append($vw, $value);
			}
		}
	}

	@if $px == $vw {
		#{$property}: $px;
	} @else {
		#{$property}: $vw;
		@include breakpoint(maxMobile){
			#{$property}: $px;
		}
	}
}

// animation
// @include animation(shadow, 2s) {
// 	0% { @include boxShadow(0, 0, 16px, 2px, rgba(251, 104, 90, .3)); }
// 	50% { @include boxShadow(0, 0, 5px, 2px, rgba(251, 104, 90, .3)); }
// 	100% { @include boxShadow(0, 0, 16px, 2px, rgba(251, 104, 90, .3)); }
// }

// @include animation(rotation, 16s, $iteration: infinite, $timing: linear ,$reverse: reverse) {
// 	100% { @include rotate(360deg); }
// }
@mixin animation($name, $duration, $iteration: null, $timing: null, $reverse: null) {
	//$name: inline-$name;

	@-webkit-keyframes #{$name} {
		@content;
	}

	@keyframes #{$name} {
		@content;
	}

	animation-name: $name;
	animation-duration: $duration;

	@if $iteration {
		animation-iteration-count: $iteration;
	} @else {
		animation-iteration-count: 1;
	}

	@if $timing {
		animation-timing-function: $timing;
	} @else {
		animation-timing-function: ease;
	}

	@if $reverse {
		animation-direction: $reverse;
	} @else {
		animation-direction: normal;
	}
}

// animation delay
// @include animationDelay(.1s);
@mixin animationDelay($delay) {
	@each $prefix in -webkit-, '' {
		#{$prefix}animation-delay: $delay;
	}
}

/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient

// @include linear-gradient(#31B7D7, #EDAC7D);
// @include linear-gradient(to right, #fa6568 0%, #ff9048 100%);
// @include linear-gradient(190deg, #f2f3f7 0%, #f2f3f7 50%, #e1ebf5 50%, #e1ebf5 90%, #f2f3f7 90%, #f2f3f7 100%);
@mixin linear-gradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
		$color-stops: ($direction, $color-stops);
		$direction: 180deg;
	}

	background: nth(nth($color-stops, 1), 1);
	background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
	background: linear-gradient($direction, $color-stops);
}

// @include radial-gradient(#31B7D7, #EDAC7D);
// @include radial-gradient(closest-side, #3f87a6, #ebf8e1, #f69d3c);
// @include radial-gradient(circle at 100%, #333, #333 50%, #eee 75%, #333 75%);
// @include radial-gradient(ellipse at top, #31B7D7, #EDAC7D);
// @include radial-gradient(ellipse at bottom, #31B7D7, #EDAC7D);
@mixin radial-gradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
		$color-stops: ($direction, $color-stops);
		$direction: 180deg;
	}

	background: nth(nth($color-stops, 1), 1);
	background: -webkit-radial-gradient(legacy-direction($direction), $color-stops);
	background: radial-gradient($direction, $color-stops);
}

// @include bg($color: #001d3d, $url: '#{$img-path}/pc/bg_top.jpg');
// @include bg($color: #a5d0fb, $url: '#{$img-path}/pc/bg_title.jpg', $size: cover);
@mixin bg($color: null, $url: null, $repeat: null, $position: null, $size: null){
	@if $color {
		background-color: $color;
	}

	@if $url {
		background-image: url($url);
	}

	@if $repeat {
		background-repeat: $repeat;
	} @else {
		background-repeat: no-repeat;
	}

	@if $position {
		background-position: $position;
	} @else {
		background-position: center top;
	}

	@if $size {
		background-size: $size;
	} @else {
		background-size: auto;
	}
}

// multiple text ellipsis
// @include multipleEllipsis(3);
@mixin multipleEllipsis($line){
	display: -webkit-box;
	overflow: hidden;
	word-wrap: break-word;
	@each $prefix in -o-, '' {
		#{$prefix}text-overflow: ellipsis;
	}
	@each $prefix in -webkit-, '' {
		#{$prefix}line-clamp: $line;
		#{$prefix}box-orient: vertical;
	}
}

// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------
// Flexbox display
@mixin flexbox {
	display: -webkit-box;
	display: -moz-box;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
}

// Inline flex display
@mixin inline-flex {
	display: -webkit-inline-box;
	display: -moz-inline-box;
	display: -webkit-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($fg: 1, $fs: 0, $fb: auto) {
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;
	// Box-Flex only supports a flex-grow value so lets grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}
	@each $prefix in -webkit-, -moz- {
		#{$prefix}box: $fg-boxflex;
	}
	@each $prefix in -webkit-, -ms-, '' {
		#{$prefix}flex: $fg $fs $fb;
	}
	// -webkit-box: $fg-boxflex;
	//    -moz-box: $fg-boxflex;
	// -webkit-flex: $fg $fs $fb;
	// 	 -ms-flex: $fg $fs $fb;
	// 		   flex: $fg $fs $fb;
}

// Flex Flow Direction
// - applies to: flex containers
// row (default) | row-reverse | column | column-reverse
@mixin flex-direction($direction: row) {
	@if $direction == row-reverse {
		@each $prefix in -webkit-, -moz- {
			#{$prefix}box-direction: reverse;
			#{$prefix}box-orient: horizontal;
		}
		// -webkit-box-direction: reverse;
		// -moz-box-direction: reverse;
		// -webkit-box-orient: horizontal;
		// -moz-box-orient: horizontal;
	} @else if $direction == column {
		@each $prefix in -webkit-, -moz- {
			#{$prefix}box-direction: normal;
			#{$prefix}box-orient: vertical;
		}
		// -webkit-box-direction: normal;
		// -moz-box-direction: normal;
		// -webkit-box-orient: vertical;
		// -moz-box-orient: vertical;
	} @else if $direction == column-reverse {
		@each $prefix in -webkit-, -moz- {
			#{$prefix}box-direction: reverse;
			#{$prefix}box-orient: vertical;
		}
		// -webkit-box-direction: reverse;
		// -moz-box-direction: reverse;
		// -webkit-box-orient: vertical;
		// -moz-box-orient: vertical;
	} @else {
		@each $prefix in -webkit-, -moz- {
			#{$prefix}box-direction: normal;
			#{$prefix}box-orient: horizontal;
		}
		// -webkit-box-direction: normal;
		// -moz-box-direction: normal;
		// -webkit-box-orient: horizontal;
		// -moz-box-orient: horizontal;
	}
	@each $prefix in -webkit-, -ms-, '' {
		#{$prefix}flex-direction: $direction;
	}
	// -webkit-flex-direction: $direction;
	// 		-ms-flex-direction: $direction;
	// 			  flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($value: nowrap) {
	// No Webkit/FF Box fallback.
	@each $prefix in -webkit-, -ms-, '' {
		#{$prefix}flex-wrap: $value;
	}
	@if $value == nowrap {
		-ms-flex-wrap: none;
	}
	// -webkit-flex-wrap: $value;
	// @if $value == nowrap {
	// 	-ms-flex-wrap: none;
	// } @else {
	// 	-ms-flex-wrap: $value;
	// }
	// flex-wrap: $value;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($values: (row nowrap)) {
	// No Webkit/FF Box fallback.
	@each $prefix in -webkit-, -ms-, '' {
		#{$prefix}flex-flow: $values;
	}
	// -webkit-flex-flow: $values;
	// 		-ms-flex-flow: $values;
	// 			  flex-flow: $values;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($int: 0) {
	@each $prefix in -webkit-, -moz- {
		#{$prefix}box-ordinal-group: $int + 1;
	}
	@each $prefix in -webkit-, -ms-, '' {
		#{$prefix}order: $int;
	}
	// -webkit-box-ordinal-group: $int + 1;
	// -moz-box-ordinal-group: $int + 1;
	// -webkit-order: $int;
	// -ms-order: $int;
	// 			  order: $int;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($int: 1) {
	@each $prefix in -webkit-, -moz- {
		#{$prefix}box-flex: $int;
	}
	@each $prefix in -webkit-, -ms-, '' {
		#{$prefix}flex-grow: $int;
		@if $prefix == -ms- {
			-ms-flex: $int;
		}
	}
	// -webkit-box-flex: $int;
	// 	-moz-box-flex: $int;
	// -webkit-flex-grow: $int;
	// 		-ms-flex: $int;
	// 		flex-grow: $int;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number> 
@mixin flex-shrink($int: 0) {
	@each $prefix in -webkit-, -moz-, -ms-, '' {
		#{$prefix}flex-shrink: $int;
		@if $prefix == -ms- {
			-ms-flex: $int;
		}
	}
	// -webkit-flex-shrink: $int;
	//    -moz-flex-shrink: $int;
	// 				 -ms-flex: $int;
	// 			  flex-shrink: $int;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width> 
@mixin flex-basis($value: auto) {
	@each $prefix in -webkit-, '' {
		#{$prefix}flex-basis: $value;
	}
	// -webkit-flex-basis: $value;
	// 			  flex-basis: $value;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around 
@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		@each $prefix in -webkit-, -moz-, -ms- {
			#{$prefix}box-pack: start;
			@if $prefix == -ms- {
				-ms-flex-pack: start;
			}
		}
		// -webkit-box-pack: start;
		// -moz-box-pack: start;
		// -ms-flex-pack: start;
	} @else if $value == flex-end {
		@each $prefix in -webkit-, -moz-, -ms- {
			#{$prefix}box-pack: end;
			@if $prefix == -ms- {
				-ms-flex-pack: end;
			}
		}
		// -webkit-box-pack: end;
		// -moz-box-pack: end;
		// -ms-flex-pack: end;
	} @else if $value == space-between {
		@each $prefix in -webkit-, -moz-, -ms- {
			#{$prefix}box-pack: justify;
			@if $prefix == -ms- {
				-ms-flex-pack: justify;
			}
		}
		// -webkit-box-pack: justify;
		// -moz-box-pack: justify;
		// -ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;
	} @else {
		@each $prefix in -webkit-, -moz-, -ms- {
			#{$prefix}box-pack: $value;
			@if $prefix == -ms- {
				-ms-flex-pack: $value;
			}
		}
		// -webkit-box-pack: $value;
		// -moz-box-pack: $value;
		// -ms-flex-pack: $value;
	}
	@each $prefix in -webkit-, '' {
		#{$prefix}justify-content: $value;
	}
	// -webkit-justify-content: $value;
	// justify-content: $value;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch 
@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch 
@mixin align-items($value: stretch) {
	@if $value == flex-start {
		@each $prefix in -webkit-, -moz-, -ms- {
			#{$prefix}box-align: start;
			@if $prefix == -ms- {
				-ms-flex-align: start;
			}
		}
		// -webkit-box-align: start;
		// -moz-box-align: start;
		// -ms-flex-align: start;
	} @else if $value == flex-end {
		@each $prefix in -webkit-, -moz- {
			#{$prefix}box-align: end;
		}
		@each $prefix in -ms- {
			#{$prefix}flex-align: end;
		}
		// -webkit-box-align: end;
		// -moz-box-align: end;
		// -ms-flex-align: end;
	} @else {
		@each $prefix in -webkit-, -moz-, -ms- {
			#{$prefix}box-align: $value;
			@if $prefix == -ms- {
				-ms-flex-align: $value;
			}
		}
		// -webkit-box-align: $value;
		// -moz-box-align: $value;
		// -ms-flex-align: $value;
	}
	@each $prefix in -webkit-, '' {
		#{$prefix}align-items: $value;
	}
	// -webkit-align-items: $value;
	// 			  align-items: $value;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}
